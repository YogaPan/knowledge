1.1 GNU Compiler Collection(GCC)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Options:
        -c         Compile and assembly but not link, this will generate *.o files.
        -o         Place the output input file.
        -w         Don't show any warnings.
        -Wall      Show all compile warnings.
        -g         This will let you use gdb to debug.
        -Os        Optimize level.
        -ansi      ansi C.
        -S         Compile only. This will generate *.S files.
        -E         Preprocessor only.
        -Idir      Add header files's search paths.
        -llibrary  Link library.
        -Ldir      Add librarys search paths.

Link:
	- http://a7419.pixnet.net/blog/post/57931682-gcc%E5%8F%83%E6%95%B8%E8%A9%B3%E8%A7%A3
	- http://changhoward.blogspot.tw/2009/02/using-gcc-to-create-static-and-shared.html


1.2 Makefile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

variables:

        VAR1  = VAR2            If VAR2 change, VAR1 will change too.
        VAR1 := VAR2            If VAR2 change, VAR1 will keep the origin value.
        VAR1 ?= VAR2            Set VAR1 default value to VAR2.
        VAR1 += VAR2            Add string into VAR1.
        echo $(VAR)             Get value.

Basic format:

        target: prerequisites
            commands

        .PHONY: all clean install

Command will be executed if:

        1. target not exist.
        2. prerequisites's mtime is newer than target's mtime.

Root target depends on sub-targets.

	root_target: sub_target1 sub_target2

	sub_target1:
	    @echo $@    Add "@" before command means this command would not print.
	sub_target2:
	    @echo $@

Symbol:
        $@              Target.
        $^              Prerequisites.
        $<              First Prerequisites.
        $?              Newer than target's prerequisites.


Function:
        $(warning message)
        $(error message)
        $(shell command)
        $(wildcard file_patter)
        $(basename filename)
        $(subst from,to,string)
        $(patsubst patter,dest,str)

Condition:

        ifeq ($(name),Yoga)
                command1
        else
                command2
        endif

Default compiler and flags:

        CC        = gcc
        CFLAGS    = -Wall
        LDFLAGS   = -lcurses -lm -pthread
        OBJS      = $(patsubst %.c,%.,%(wildcard *.c))

LINK:
	- http://wen00072.github.io/blog/2014/07/09/gnu-make-autotools-and-cmake-introduction-slides-on-line/
	- http://maxubuntu.blogspot.tw/2010/02/makefile.html
	- http://htwm.readthedocs.org/zh_CN/latest/introduction.html
