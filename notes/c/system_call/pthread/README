1.1 Basic Operation
~~~~~~~~~~~~~~~~~~~~~

Function prototype:

        int pthread_create(pthread_t *thread,
                       const pthread_attr_t *attr,
                       void *(*start_routine)(void *),
                       void *arg);
        void pthread_exit(void *value_ptr);

        int pthread_join(pthread_t thread, void **value_ptr);

Inlcude pthread.h:

        #include <pthread.h>

A function return accept void pointer and return void pointer:

        static void *do_nothing(void *args)
        {
                pthread_exit(NULL);
        }

Thread id:

        pthread_t tid;

Create a new thread:

        pthread_create(&tid, NULL, do_nothing, NULL);

Wait for the thread finish:

        pthread_join(tid, NULL);


1.2 Mutex Lock
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Function prototype:

        int pthread_mutex_init(pthread_mutex_t *mutex,
                               const pthread_mutexattr_t *mutexattr)
        int pthread_mutex_destroy(pthread_mutex_t *mutex)

        int pthread_mutex_lock(pthread_mutex_t *mutex)
        int pthread_mutex_unlock(pthread_mutex_t *mutex)
        int pthread_mutex_trylock(pthread_mutex_t *mutex)

Initialize lock and destroy lock:

        pthread_mutex_t lock;
        pthread_mutex_init(&lock, NULL);
        pthread_mutex_destroy(&lock);

Only one thread can enter locking area in same time.

        pthread_mutex_lock(&lock)
        /* lock area, only one thread can enter locking area in same time. */
        pthread_mutex_unlock(&lock);


1.3 Condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Function prototype:

        int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t
                              *cond_attr)
        int pthread_cond_destroy(pthread_cond_t *cond)
        int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)
        int pthread_cond_signal(pthread_cond_t *cond);
        int pthread_cond_brocast(pthread_cond_t *cond);

Initialize condition and destroy:

        pthread_cond_t notify;
        pthread_cond_init(&notify, NULL);
        pthread_cond_destroy(&notify);

Sleep and waiting for signal:

        pthread_cond_wait(&notify, &lock);

Awake waiting thread:

        pthread_cond_signal(&notify);    /* Awake only one thread */
        pthread_cond_broadcast(&notify); /* Awake all threads */


1.4 link
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- http://swind.code-life.info/posts/c-thread-pool.html
- https://github.com/mbrossard/threadpool/blob/master/src/threadpool.c
- http://blog.xuite.net/mb1016.flying/linux/26293042-%E8%BD%89%E8%B2%BC%3A+pthread+%E8%A7%A3%E8%AE%80(%E4%B8%89)
