1.1 Data structure
~~~~~~~~~~~~~~~~~~~~~~~~

Include library:

	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netdb.h>

addrinfo:

	struct addrinfo {
		int ai_flags;               /* AI_PASSIVE, AI_CANONNAME */
		int ai_family;              /* AF_INET, AF_INET6, AF_UNSPEC */
		int ai_socktype;            /* SOCK_STREAM, SOCK_DGRAM */
		int ai_protocol;            /* "0" means any. */
		size_t ai_addrlen;          /* sizeof ai_addr */
		struct sockaddr *ai_addr;   /* struct sockaddr_in or sockaddr_in6 */
		char *ai_cannonname;        /* hostname */
		struct addrinfo *ai_next;   /* next node */
	};

sockaddr:
	struct sockaddr {
		unsigned short sa_famaly;   /* AF_XXX */
		char sa_data[14];           /* 14 bytes of protocol address */
	};

sockaddr_in:

	struct sockaddr_in {
		short int sin_family;        /* address family, AF_XXX */
		unsigned short int sin_port; /* port number */
		struct in_addr sin_addr;     /* Internet address */
		unsigned char sin_zero[8];   /* same as struct sockaddr size */
	};

in_addr:

	struct in_addr {
		uint32_t s_addr;             /* That's 32-bit int (4 bytes) */
	};

sockaddr and sockaddr_in is same thing, so you can cast them:

	struct sockaddr_in *ipv4 = (struct sockaddr_in *)p->ai_addr;

If you want to get ip address, use inet_ntop. For example:

	#include <arpa/inet.h>

	struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p->ai_addr;
	char ipstr[INET6_ADDRSTRLEN];
	void *addr;

	addr = &ipv6->sin6_addr;
        inet_ntop(p->ai_family, addr, ipstr, sizeof(ipstr));
	printf("%s\n", ipstr);


1.2 Create a Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Declare varialbles:

	int ret;
	struct addrinfo hints, *res;

ret will get function call return value, this can check is error occured.
hints use to "Hint" the
res is a linked list.

Set all flags and options in hints addrfinfo:

	memset(&hints, 0, sizeof(hints));
	hints.ai_family   = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	ret = getaddrinfo("www.google.com", "80", &hints, &res);
	if (ret != 0)
		fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(ret));

set ai_family to AF_UNSPEC means don't care IPv4 or IPv6.
set ai_socktype to SOCK_STREAM means use TCP protocol.

	struct addrinfo *p;

	for (p = res; p != NULL; p = p->ai_next) {
		/* your code here */
	}

	if (p == NULL)
		fprintf(stderr, "failed to connect\n");

You can use the program below in the loop to get ip:

	char ipstr[INET6_ADDRSTRLEN];
	void *addr;
        char *ipver;

        if (p->ai_family == AF_INET) {
                struct sockaddr_in *ipv4 = (struct sockaddr_in *)p->ai_addr;
                addr = &ipv4->sin_addr;
                ipver = "IPv4";
        } else {
                struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p->ai_addr;
                addr = &ipv6->sin6_addr;
                ipver = "ipv6";
        }

        inet_ntop(p->ai_family, addr, ipstr, sizeof(ipstr));
        printf(" %s: %s\n", ipver, ipstr);

Or you can user the program below in loop to get socket descriptor:

	int sockfd;

	sockfd = socket(p->ai_family, p->ai_socktype, p->protocol);
	if (sockfd == -1) {
		perror("socket");
		continue;
	}

	ret = connect(sockfd, p->ai_addr, p->ai_addrlen);
	if (ret == -1) {
		perror("connect");
		close(sockfd);
		continue;
	}
	break;

Finally, you have to free your addrinfo:

	freeaddrinfo(res);


After get the sockfd and free addrinfo, you can send and recieve message:

	int ret, bytes, len;
	char msg[1024];
	char buf[1024];


	bytes = 0;
	len = strlen(msg);

	while (bytes < len) {
		ret = send(sockfd, msg+bytes, len-bytes, 0);
		if (ret == -1)
			perror("send");
		bytes += ret;
	}

	for (;;) {
		ret = recv(sockfd, msg, 1024, 0);
		if (ret == -1) {
			perror("recv");
		} else if (ret == 0) {
			break;
		} else {
			buf[ret] = '\0';
			printf("%s", buf);
		}
	}

Close socket:

	close(sockfd);


1.3 Create a Server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Declare variables:

	int ret;
	struct addrinfo hints, *servinfo;

Set all flags and options in hints:

	memset(&hints, 0, sizeof(hints));
	hints.ai_family   = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags    = AI_PASSIVE;

Use hints to get servinfo:

	ret = getaddrinfo(NULL, "3000", &hints, &servinfo);

	if (ret != 0)
		fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(ret));

Free addrinfo:

	freeaddrinfo(servinfo);

Operations:

	#include <sys/types.h>
	#include <sys/socket.h>
	#include <unistd.h>

	int bind(int sockfd, struct sockaddr *my_addr, socklen_t addrlen);
	int listen(int sockfd, int backlog);
	int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

	bind(sockfd, res->ai_addr, res->ai_addrlen);
	listen(sockfd, 20);
	client_sock = accept(sockfd, (struct sockaddr *)&client_addr, &sizeof(addr_size));

	int shutdown(int sockfd, int how);
	/*
	 * 0 不允許再接收資料
	 * 1 不允許再傳送資料
	 * 2 不允許再傳送與接收資料
	 */

Create server workflow:

	getaddrinfo() -> socket() -> bind() -> listen() -> accept() -> close

Make sure your port can use:

	int yes = 1; /* solaris user: char yes = "1"; */
	if (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1) {
		perror("setsockopt");
		exit(1);
	}

Link:
- http://beej-zhtw-gitbook.netdpi.net/WhatIsSocket.html
- https://github.com/cbsheng/tinyhttpd
