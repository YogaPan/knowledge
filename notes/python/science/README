Python Science
=======================


1.1 Numpy
~~~~~~~~~~~~~~~~~~~~~~

Numpy official documentation: https://docs.scipy.org/doc/numpy-dev/user/quickstart.html
Numpy git repo: https://github.com/numpy/numpy

First you have to install numpy package:

        $ sudo pip3 install numpy

Import numpy package:

        >>> import numpy as np

How to create a numpy array and some basic attributes:

        >>> a = np.array(1,2,3,4)    # WRONG
        >>> a = np.array([1,2,3,4])  # RIGHT

        >>> b = a.copy()
        array([1, 2, 3, 4])

        >>> a = np.arange(15).reshape(3, 5)
        array([[ 0,  1,  2,  3,  4 ],
               [ 5,  6,  7,  8,  9 ],
               [10, 11, 12, 13, 14]])
        >>> a.ndim
        2
        >>> a.shape
        (3, 5)
        >>> a.dtype.name
        'int64'
        >>> a.itemsize
        8
        >>> a.size
        15

        >>> np.zeros((3,4))
        >>> np.ones((2,3,4), dtype=np.int16)

        >>> np.arange(10, 30, 5)
        array([10, 15, 20, 25])

        >>> a = np.random.random((2,3))
        array([[ 0.18626021,  0.34556073,  0.39676747 ],
               [ 0.53881673,  0.41919451,  0.6852195  ]])

        >>> np.linspace(0, 2, 9)
        array([ 0. ,0.25 , 0.5, 0.75, 1., 1.25, 1.5, 1.75, 2.])

Numpy array operations not like python list:

        # python list
        >>> a = [1, 2, 3, 4]
        >>> b = [5, 6, 7, 8]
        >>> a + b
        [1, 2, 3, 4, 5, 6, 7, 8]

        >>> a * 2
        [1, 2, 3, 4, 1, 2, 3, 4]

        # numpy array
        >>> a = np.array([1, 2, 3, 4])
        >>> b = np.array([5, 6, 7, 8])
        >>> a + b
        array([6, 8, 10, 12])

        >>> a * 2
        [2, 4, 6, 8]

        >>> a < 2
        array([ True, False, False, False ], dtype=bool)

Numpy provides some matrix method:

        >>> a = np.array([[1, 1],
                         [0, 1]])
        >>> b = np.array([[2, 0],
                          [3, 4]])
        >>> a.dot(b)
        array([[5, 4],
               [3, 4]])
        >>> np.dot(a, b)
        array([[5, 4],
               [3, 4]])

Some operations like max, min, and sum:

        >>> a = np.random.random((2,3))
        array([[ 0.18626021,  0.34556073,  0.39676747 ],
               [ 0.53881673,  0.41919451,  0.6852195  ]])
        >>> a.sum()
        2.5718191614547998
        >>> a.min()
        0.1862602113776709
        >>> a.max()
        0.6852195003967595

        >>> b = np.arange(12).reshape(3,4)
        array([[ 0,  1,  2,  3 ],
               [ 4,  5,  6,  7 ],
               [ 8,  9, 10, 11 ]])

        >>> b.sum(axis=0)  # sum of each column
        array([12, 15, 18, 21])
        >>> b.min(axis=1)  # min of each row
        array([0, 4, 8])
        >>> b.cumsum(axis=1) # cumulative sum along each
        array([[ 0,  1,  3,  6 ],
               [ 4,  9, 15, 22 ],
               [ 8, 17, 27, 38 ]])

Slice and Index:

        >>> def f(x,y):
        ...     return 10*x+y
        ...
        >>> b = np.fromfunction(f,(5,4),dtype=int)
        >>> b
        array([[ 0,  1,  2,  3 ],
               [10, 11, 12, 13],
               [20, 21, 22, 23],
               [30, 31, 32, 33],
               [40, 41, 42, 43]])
        >>> b[2, 3]
        23
        >>> b[:, 1]
        array([ 1, 11, 21, 31, 41 ])
        >>> b[1:3, : ]
        array([[10, 11, 12, 13],
               [20, 21, 22, 23]])


1.2 Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~

Matplotlib official documentation: http://matplotlib.org/devdocs/contents.html
Matplotlib git repo: https://github.com/matplotlib/matplotlib

Install matplotlib package:

        $ sudo apt-get install python3-matplotlib

Setting matplotlibrc:

        >>> import matplotlib
        >>> matplotlib.matplotlib_fname()
        '/etc/matplotlibrc'
        $ sudo vim /etc/matplotlibrc

Find backend and change to Agg:

        backend      : Agg

More customizing option you can see
http://matplotlib.org/users/customizing.html#customizing-matplotlib

Import matplotlib:

        import matplotlib.pyplot as plt

Basic usage:

        plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
        plt.show()  # plt.savefig('test.png')

Set labels:

        plt.title('test')
        plt.ylabel('age')
        plt.xlabel('person')
        plt.grid(True)


properties:

        -       line
        --      dash line
        s       squar
        o       point
        ^       triangle

        r       Red
        g       Green
        b       Blue

        plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')

        lines = plt.plot(t1, t2)
        plt.setp(lines, color='r', linewidth=2.0)


Link:
        - http://www.cnblogs.com/wei-li/archive/2012/05/23/2506940.html


1.3 Pandas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pandas official documentation: http://pandas.pydata.org/pandas-docs/stable/10min.html
Pandas git repo: https://github.com/pydata/pandas

# TODO
# TODO


1.4 Sklearn
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sklearn official documentation: http://scikit-learn.org/stable/documentation.html
Sklearn git repo: https://github.com/scikit-learn/scikit-learn

Install dependencies:

        $ sudo apt-get install libblas-dev liblapack-dev libatlas-base-dev gfortran
        $ sudo pip3 install scipy

Install sklearn:

        $ sudo pip3 install sklearn


1.5 Tensorflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tensorflow official documentation: https://www.tensorflow.org/versions/r0.7/get_started/index.html
Tensorflow git repo: https://github.com/tensorflow/tensorflow
